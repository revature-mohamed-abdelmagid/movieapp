package com.revature.movieapp.movieapp.model;

import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * User Entity - Represents a user in the movie application
 * This entity is used for both authentication and authorization
 */
@Entity
@Table(name = "users") // Specify table name to avoid reserved keyword issues
@Data // Lombok: generates getters, setters, toString, equals, and hashCode
@NoArgsConstructor // Lombok: generates no-args constructor
@AllArgsConstructor // Lombok: generates all-args constructor
public class User {

    // Primary key - auto-generated by database
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    // Email field with validation
    @Email(message = "Email should be valid")
    @Column(unique = true) // Email must be unique
    private String email;

    // Username field with validation
    @NotBlank(message = "Username is required")
    @Size(min = 3, max = 50, message = "Username must be between 3 and 50 characters")
    @Column(unique = true, nullable = false) // Username must be unique and not null
    private String username;

    // Password field - will be encoded by BCrypt
    @NotBlank(message = "Password is required")
    @Column(nullable = false)
    private String password;

    // Timestamp for when user was created (Unix timestamp)
    private Long createdat;

    /**
     * Roles assigned to this user
     * - @ElementCollection: tells JPA this is a collection of simple types (enum)
     * - @Enumerated(EnumType.STRING): stores enum as string in DB (not ordinal number)
     * - @CollectionTable: creates a separate table to store the roles
     * - FetchType.EAGER: loads roles immediately with the user (important for security)
     */
    @ElementCollection(fetch = FetchType.EAGER)
    @Enumerated(EnumType.STRING) // Store as "ROLE_USER", "ROLE_ADMIN", etc.
    @CollectionTable(
        name = "user_roles", // Name of the join table
        joinColumns = @JoinColumn(name = "user_id") // Foreign key column name
    )
    @Column(name = "role") // Column name in the user_roles table
    private Set<Role> roles = new HashSet<>();

}


